# parse colors
# .replace[<&lt>&1<&gt>].with[<&1>].replace[<&lt>dark_green<&gt>].with[<dark_green>].replace[<&lt>&3<&gt>].with[<&3>].replace[<&lt>&4<&gt>].with[<&4>].replace[<&lt>&5<&gt>].with[<&5>].replace[<&lt>gold<&gt>].with[<gold>].replace[<&lt>&7<&gt>].with[<&7>].replace[<&lt>&8<&gt>].with[<&8>].replace[<&lt>&9<&gt>].with[<&9>].replace[<&lt>&0<&gt>].with[<&0>].replace[<&lt>&a<&gt>].with[<&a>].replace[<&lt>&b<&gt>].with[<&b>].replace[<&lt>&c<&gt>].with[<&c>].replace[<&lt>&d<&gt>].with[<&d>].replace[<&lt>&e<&gt>].with[<&e>].replace[<&lt>&f<&gt>].with[<&f>].replace[<&lt>&k<&gt>].with[<&k>].replace[<&lt>&l<&gt>].with[<&l>].replace[<&lt>&m<&gt>].with[<&m>].replace[<&lt>&n<&gt>].with[<&n>].replace[<&lt>&o<&gt>].with[<&o>].replace[<&lt>&r<&gt>].with[<&r>]

Trader:
  type: assignment
  actions:
    on assignment:

      - flag npc size:9
      - flag npc "inv_title:This is trader GUI!"
      - flag npc "trader_name:Trader"
      - flag npc "trader_mode:buy"
      - flag npc "edit_mode:false"

      # repetitive flags:
      - define slot 1
      - repeat 54:
        - flag npc "price_<def[slot]>:69"
        - flag npc "material_<def[slot]>:air"
        - flag npc "lore1_<def[slot]>:<&c>de<gold>fa<&e>u<&a>lt <dark_green>lo<&b>re<&9>1 <&1>te<&d>x<&5>t<&sp>"
        - flag npc "lore2_<def[slot]>:<&c>de<gold>fa<&e>u<&a>lt <dark_green>lo<&b>re<&9>2 <&1>te<&d>x<&5>t<&sp>"
        - define slot:+:1
      - narrate "<green><bold>[info:TraderBase]<reset> <aqua>default values initialized"

  interact scripts:
    - 1 Trader_Interact

Trader_Interact:
  type: interact
  steps:
    1:
      click trigger:
        script:
          - ^flag player "trader_name:<parse:<npc.flag[trader_name]>>"
          - ^flag player customer:<npc.flag[trader_mode].is[==].to[sell]>
          - ^flag player seller:<npc.flag[trader_mode].is[==].to[buy]>

          # repetitive tags:
          - define slot 1
          - repeat 54:
            - ^flag player price_<def[slot]>:<npc.flag[price_<def[slot]>]>
            - define slot:+:1
          - inventory open d:in@Trader_GUI

Trader_GUI:
  type: inventory
  #Название GUI
  title: <parse:<npc.flag[inv_title]||Trader>>
  size: <npc.flag[size]>

  procedural items:
    - define slot 1
    - repeat 54:
      - define LORE_1_DEFINITION_<def[slot]> <tern[<npc.flag[lore1_<def[slot]>].is[==].to[null]>].pass[null].fail[<parse:<npc.flag[lore1_<def[slot]>]>>]>
      - define LORE_2_DEFINITION_<def[slot]> <tern[<npc.flag[lore2_<def[slot]>].is[==].to[null]>].pass[null].fail[<parse:<npc.flag[lore2_<def[slot]>]>>]>

      - if <def[LORE_1_DEFINITION_<def[slot]>].is[==].to[null]>:
          - if <def[LORE_2_DEFINITION_<def[slot]>].is[==].to[null]>:
              - define lorelist_<def[slot]> <list[]>
          - else:
              - define lorelist_<def[slot]> <list[<def[LORE_2_DEFINITION_<def[slot]>]>]>
      - else:
          - if <def[LORE_2_DEFINITION_<def[slot]>].is[!=].to[null]>:
              - define lorelist_<def[slot]> <list[<def[LORE_1_DEFINITION_<def[slot]>]>|<def[LORE_2_DEFINITION_<def[slot]>]>]>
          - else:
              - define lorelist_<def[slot]> <list[<def[LORE_1_DEFINITION_<def[slot]>]>]>


      - flag npc display_i_<def[slot]>:<npc.flag[material_<def[slot]>]>[lore=<def[lorelist_<def[slot]>]>]
      #- narrate <def[display_i_<def[slot]>]>
      - define slot:+:1

    - define list <list[<tern[<npc.flag[material_1].is[==].to[air]>].pass[air].fail[<npc.flag[material_1]>[lore=<def[lorelist_1]>]]>|<tern[<npc.flag[material_2].is[==].to[air]>].pass[air].fail[<npc.flag[material_2]>[lore=<def[lorelist_2]>]]>|<tern[<npc.flag[material_3].is[==].to[air]>].pass[air].fail[<npc.flag[material_3]>[lore=<def[lorelist_3]>]]>|<tern[<npc.flag[material_4].is[==].to[air]>].pass[air].fail[<npc.flag[material_4]>[lore=<def[lorelist_4]>]]>|<tern[<npc.flag[material_5].is[==].to[air]>].pass[air].fail[<npc.flag[material_5]>[lore=<def[lorelist_5]>]]>|<tern[<npc.flag[material_6].is[==].to[air]>].pass[air].fail[<npc.flag[material_6]>[lore=<def[lorelist_6]>]]>|<tern[<npc.flag[material_7].is[==].to[air]>].pass[air].fail[<npc.flag[material_7]>[lore=<def[lorelist_7]>]]>|<tern[<npc.flag[material_8].is[==].to[air]>].pass[air].fail[<npc.flag[material_8]>[lore=<def[lorelist_8]>]]>|<tern[<npc.flag[material_9].is[==].to[air]>].pass[air].fail[<npc.flag[material_9]>[lore=<def[lorelist_9]>]]>|<tern[<npc.flag[material_10].is[==].to[air]>].pass[air].fail[<npc.flag[material_10]>[lore=<def[lorelist_10]>]]>|<tern[<npc.flag[material_11].is[==].to[air]>].pass[air].fail[<npc.flag[material_11]>[lore=<def[lorelist_11]>]]>|<tern[<npc.flag[material_12].is[==].to[air]>].pass[air].fail[<npc.flag[material_12]>[lore=<def[lorelist_12]>]]>|<tern[<npc.flag[material_13].is[==].to[air]>].pass[air].fail[<npc.flag[material_13]>[lore=<def[lorelist_13]>]]>|<tern[<npc.flag[material_14].is[==].to[air]>].pass[air].fail[<npc.flag[material_14]>[lore=<def[lorelist_14]>]]>|<tern[<npc.flag[material_15].is[==].to[air]>].pass[air].fail[<npc.flag[material_15]>[lore=<def[lorelist_15]>]]>|<tern[<npc.flag[material_16].is[==].to[air]>].pass[air].fail[<npc.flag[material_16]>[lore=<def[lorelist_16]>]]>|<tern[<npc.flag[material_17].is[==].to[air]>].pass[air].fail[<npc.flag[material_17]>[lore=<def[lorelist_17]>]]>|<tern[<npc.flag[material_18].is[==].to[air]>].pass[air].fail[<npc.flag[material_18]>[lore=<def[lorelist_18]>]]>|<tern[<npc.flag[material_19].is[==].to[air]>].pass[air].fail[<npc.flag[material_19]>[lore=<def[lorelist_19]>]]>|<tern[<npc.flag[material_20].is[==].to[air]>].pass[air].fail[<npc.flag[material_20]>[lore=<def[lorelist_20]>]]>|<tern[<npc.flag[material_21].is[==].to[air]>].pass[air].fail[<npc.flag[material_21]>[lore=<def[lorelist_21]>]]>|<tern[<npc.flag[material_22].is[==].to[air]>].pass[air].fail[<npc.flag[material_22]>[lore=<def[lorelist_22]>]]>|<tern[<npc.flag[material_23].is[==].to[air]>].pass[air].fail[<npc.flag[material_23]>[lore=<def[lorelist_23]>]]>|<tern[<npc.flag[material_24].is[==].to[air]>].pass[air].fail[<npc.flag[material_24]>[lore=<def[lorelist_24]>]]>|<tern[<npc.flag[material_25].is[==].to[air]>].pass[air].fail[<npc.flag[material_25]>[lore=<def[lorelist_25]>]]>|<tern[<npc.flag[material_26].is[==].to[air]>].pass[air].fail[<npc.flag[material_26]>[lore=<def[lorelist_26]>]]>|<tern[<npc.flag[material_27].is[==].to[air]>].pass[air].fail[<npc.flag[material_27]>[lore=<def[lorelist_27]>]]>|<tern[<npc.flag[material_28].is[==].to[air]>].pass[air].fail[<npc.flag[material_28]>[lore=<def[lorelist_28]>]]>|<tern[<npc.flag[material_29].is[==].to[air]>].pass[air].fail[<npc.flag[material_29]>[lore=<def[lorelist_29]>]]>|<tern[<npc.flag[material_30].is[==].to[air]>].pass[air].fail[<npc.flag[material_30]>[lore=<def[lorelist_30]>]]>|<tern[<npc.flag[material_31].is[==].to[air]>].pass[air].fail[<npc.flag[material_31]>[lore=<def[lorelist_31]>]]>|<tern[<npc.flag[material_32].is[==].to[air]>].pass[air].fail[<npc.flag[material_32]>[lore=<def[lorelist_32]>]]>|<tern[<npc.flag[material_33].is[==].to[air]>].pass[air].fail[<npc.flag[material_33]>[lore=<def[lorelist_33]>]]>|<tern[<npc.flag[material_34].is[==].to[air]>].pass[air].fail[<npc.flag[material_34]>[lore=<def[lorelist_34]>]]>|<tern[<npc.flag[material_35].is[==].to[air]>].pass[air].fail[<npc.flag[material_35]>[lore=<def[lorelist_35]>]]>|<tern[<npc.flag[material_36].is[==].to[air]>].pass[air].fail[<npc.flag[material_36]>[lore=<def[lorelist_36]>]]>|<tern[<npc.flag[material_37].is[==].to[air]>].pass[air].fail[<npc.flag[material_37]>[lore=<def[lorelist_37]>]]>|<tern[<npc.flag[material_38].is[==].to[air]>].pass[air].fail[<npc.flag[material_38]>[lore=<def[lorelist_38]>]]>|<tern[<npc.flag[material_39].is[==].to[air]>].pass[air].fail[<npc.flag[material_39]>[lore=<def[lorelist_39]>]]>|<tern[<npc.flag[material_40].is[==].to[air]>].pass[air].fail[<npc.flag[material_40]>[lore=<def[lorelist_40]>]]>|<tern[<npc.flag[material_41].is[==].to[air]>].pass[air].fail[<npc.flag[material_41]>[lore=<def[lorelist_41]>]]>|<tern[<npc.flag[material_42].is[==].to[air]>].pass[air].fail[<npc.flag[material_42]>[lore=<def[lorelist_42]>]]>|<tern[<npc.flag[material_43].is[==].to[air]>].pass[air].fail[<npc.flag[material_43]>[lore=<def[lorelist_43]>]]>|<tern[<npc.flag[material_44].is[==].to[air]>].pass[air].fail[<npc.flag[material_44]>[lore=<def[lorelist_44]>]]>|<tern[<npc.flag[material_45].is[==].to[air]>].pass[air].fail[<npc.flag[material_45]>[lore=<def[lorelist_45]>]]>|<tern[<npc.flag[material_46].is[==].to[air]>].pass[air].fail[<npc.flag[material_46]>[lore=<def[lorelist_46]>]]>|<tern[<npc.flag[material_47].is[==].to[air]>].pass[air].fail[<npc.flag[material_47]>[lore=<def[lorelist_47]>]]>|<tern[<npc.flag[material_48].is[==].to[air]>].pass[air].fail[<npc.flag[material_48]>[lore=<def[lorelist_48]>]]>|<tern[<npc.flag[material_49].is[==].to[air]>].pass[air].fail[<npc.flag[material_49]>[lore=<def[lorelist_49]>]]>|<tern[<npc.flag[material_50].is[==].to[air]>].pass[air].fail[<npc.flag[material_50]>[lore=<def[lorelist_50]>]]>|<tern[<npc.flag[material_51].is[==].to[air]>].pass[air].fail[<npc.flag[material_51]>[lore=<def[lorelist_51]>]]>|<tern[<npc.flag[material_52].is[==].to[air]>].pass[air].fail[<npc.flag[material_52]>[lore=<def[lorelist_52]>]]>|<tern[<npc.flag[material_53].is[==].to[air]>].pass[air].fail[<npc.flag[material_53]>[lore=<def[lorelist_53]>]]>|<tern[<npc.flag[material_54].is[==].to[air]>].pass[air].fail[<npc.flag[material_54]>[lore=<def[lorelist_54]>]]>]>
    #- define list <list[<npc.flag[material_1]>[lore=<def[lorelist_1]>]|<npc.flag[material_2]>[lore=<def[lorelist_2]>]|<npc.flag[material_3]>[lore=<def[lorelist_3]>]|<npc.flag[material_4]>[lore=<def[lorelist_4]>]|<npc.flag[material_5]>[lore=<def[lorelist_5]>]|<npc.flag[material_6]>[lore=<def[lorelist_6]>]|<npc.flag[material_7]>[lore=<def[lorelist_7]>]|<npc.flag[material_8]>[lore=<def[lorelist_8]>]|<npc.flag[material_9]>[lore=<def[lorelist_9]>]|<npc.flag[material_10]>[lore=<def[lorelist_10]>]|<npc.flag[material_11]>[lore=<def[lorelist_11]>]|<npc.flag[material_12]>[lore=<def[lorelist_12]>]|<npc.flag[material_13]>[lore=<def[lorelist_13]>]|<npc.flag[material_14]>[lore=<def[lorelist_14]>]|<npc.flag[material_15]>[lore=<def[lorelist_15]>]|<npc.flag[material_16]>[lore=<def[lorelist_16]>]|<npc.flag[material_17]>[lore=<def[lorelist_17]>]|<npc.flag[material_18]>[lore=<def[lorelist_18]>]|<npc.flag[material_19]>[lore=<def[lorelist_19]>]|<npc.flag[material_20]>[lore=<def[lorelist_20]>]|<npc.flag[material_21]>[lore=<def[lorelist_21]>]|<npc.flag[material_22]>[lore=<def[lorelist_22]>]|<npc.flag[material_23]>[lore=<def[lorelist_23]>]|<npc.flag[material_24]>[lore=<def[lorelist_24]>]|<npc.flag[material_25]>[lore=<def[lorelist_25]>]|<npc.flag[material_26]>[lore=<def[lorelist_26]>]|<npc.flag[material_27]>[lore=<def[lorelist_27]>]|<npc.flag[material_28]>[lore=<def[lorelist_28]>]|<npc.flag[material_29]>[lore=<def[lorelist_29]>]|<npc.flag[material_30]>[lore=<def[lorelist_30]>]|<npc.flag[material_31]>[lore=<def[lorelist_31]>]|<npc.flag[material_32]>[lore=<def[lorelist_32]>]|<npc.flag[material_33]>[lore=<def[lorelist_33]>]|<npc.flag[material_34]>[lore=<def[lorelist_34]>]|<npc.flag[material_35]>[lore=<def[lorelist_35]>]|<npc.flag[material_36]>[lore=<def[lorelist_36]>]|<npc.flag[material_37]>[lore=<def[lorelist_37]>]|<npc.flag[material_38]>[lore=<def[lorelist_38]>]|<npc.flag[material_39]>[lore=<def[lorelist_39]>]|<npc.flag[material_40]>[lore=<def[lorelist_40]>]|<npc.flag[material_41]>[lore=<def[lorelist_41]>]|<npc.flag[material_42]>[lore=<def[lorelist_42]>]|<npc.flag[material_43]>[lore=<def[lorelist_43]>]|<npc.flag[material_44]>[lore=<def[lorelist_44]>]|<npc.flag[material_45]>[lore=<def[lorelist_45]>]|<npc.flag[material_46]>[lore=<def[lorelist_46]>]|<npc.flag[material_47]>[lore=<def[lorelist_47]>]|<npc.flag[material_48]>[lore=<def[lorelist_48]>]|<npc.flag[material_49]>[lore=<def[lorelist_49]>]|<npc.flag[material_50]>[lore=<def[lorelist_50]>]|<npc.flag[material_51]>[lore=<def[lorelist_51]>]|<npc.flag[material_52]>[lore=<def[lorelist_52]>]|<npc.flag[material_53]>[lore=<def[lorelist_53]>]|<npc.flag[material_54]>[lore=<def[lorelist_54]>]]>
    - determine <[list]>
    #- narrate <i@<npc.flag[material_1]>.with[lore=lorelist_1]>
    #- narrate <def[lorelist_1]>




  #slots:
    #- "[i@<npc.flag[display_i_1]>] [i@<npc.flag[display_i_2]>] [i@<npc.flag[display_i_3]>] [i@<npc.flag[display_i_4]>] [i@<npc.flag[display_i_5]>] [i@<npc.flag[display_i_6]>] [i@<npc.flag[display_i_7]>] [i@<npc.flag[display_i_8]>] [i@<npc.flag[display_i_9]>]"
    #- "[i@<npc.flag[material_10]>] [i@<npc.flag[material_11]>] [i@<npc.flag[material_12]>] [i@<npc.flag[material_13]>] [i@<npc.flag[material_14]>] [i@<npc.flag[material_15]>] [i@<npc.flag[material_16]>] [i@<npc.flag[material_17]>] [i@<npc.flag[material_18]>]"
    # "[i@<npc.flag[material_19]>] [i@<npc.flag[material_20]>] [i@<npc.flag[material_21]>] [i@<npc.flag[material_22]>] [i@<npc.flag[material_23]>] [i@<npc.flag[material_24]>] [i@<npc.flag[material_25]>] [i@<npc.flag[material_26]>] [i@<npc.flag[material_27]>]"
    #- "[i@<npc.flag[material_28]>] [i@<npc.flag[material_29]>] [i@<npc.flag[material_30]>] [i@<npc.flag[material_31]>] [i@<npc.flag[material_32]>] [i@<npc.flag[material_33]>] [i@<npc.flag[material_34]>] [i@<npc.flag[material_35]>] [i@<npc.flag[material_36]>]"
    #- "[] [] [] [] [] [] [] [] []"
    #- "[] [] [] [] [] [] [] [] []"
    #- "[] [] [] [] [] [] [] [] []"

Trader_Handler:
  type: world
  events:
    on player drags in Trader_GUI:
      #- if <!player.has_flag[edits_npc]>:
        - determine cancelled

    # Reset player's flags
    on player closes Trader_GUI:
      - define slot 1
      - repeat 54:
          - ^flag player price_<def[slot]>:!
          - define slot:+:1

      - ^flag player customer:false
      - ^flag player seller:false

      - if <player.has_flag[edits_npc]>:
          - ^flag <player.flag[edits_npc]> "edit_mode:false"
          - ^flag player edits_npc:!
          - narrate "<green><bold>[info:TraderBase]<reset> <green>edit mode disabled"

    # Handle user's click
    on player clicks in Trader_GUI:
      - define itemRaw stone[material=<context.item.material>]
      - define localMsg "<&f>[L]<&sp><gold><player.flag[trader_name]><&r><&8><&sp><&gt><&gt><&sp>"
      - define price <player.flag[price_<context.slot>]>
      # player opened inventory to edit item layout
      - if <player.has_flag[edits_npc]>:
          - if <player.inventory.is[!=].to[<context.clicked_inventory>]>:
          
            - if <context.cursor_item.material.contains[<&lb>]>:    
				- narrate "item has hroperty"
                - flag <player.flag[edits_npc]> "material_<context.slot>:<context.cursor_item.material.replace[<context.cursor_item.material.substring[<context.cursor_item.material.index_of[<&lb>]>]>].replace[m@]>"
				- narrate "<green><bold>[info:TraderBase]<reset> <aqua>set item in slot <gray>'<context.slot>'<aqua> to <gray>'<context.cursor_item.material.replace[<context.cursor_item.material.substring[<context.cursor_item.material.index_of[<&lb>]>]>].replace[m@]>'<blue>.<reset>"
			- else:
				- narrate "item does not have property"
                - flag <player.flag[edits_npc]> "material_<context.slot>:<context.cursor_item.material.replace[m@]>"
				- narrate "<green><bold>[info:TraderBase]<reset> <aqua>set item in slot <gray>'<context.slot>'<aqua> to <gray>'<context.cursor_item.material.replace[m@]>'<blue>.<reset>"
			- define member_edited <player.flag[edits_npc]>
			- narrate "group <def[member_edited].as_npc.flag[group]> of <def[member_edited]>"
			
			- if <player.flag[edits_npc].as_npc.has_flag[group]>:
				# set material for all group members
				- foreach <list[<server.flag[<def[member_edited].as_npc.flag[group]>]>]>:
					- narrate "changed <[value]>"
					- if <def[member_edited].is[==].to[null]>:
						- narrate "something went wrong"
						- stop
					- narrate "set flag material_<context.slot> of <[value]> to <def[member_edited].as_npc.flag[material_<context.slot>]>"
					- flag <[value]> "material_<context.slot>:<def[member_edited].as_npc.flag[material_<context.slot>]>"
			- else:
				- narrate "not in group"
      # player opened inventory to buy/sell items
      - else:
          - if <context.item.material.is[!=].to[m@air]>:
            - if <player.flag[seller]>:
			  # player gives items and gets money
			    - define inv <player.inventory>
			    - if <def[inv].is[==].to[<context.clicked_inventory>]>:
				    - determine cancelled
				    - stop
					
				- if <context.is_shift_click>:
					- define amount 2368
					- repeat 2368:
						- if <player.inventory.contains[<def[itemRaw]>].qty[<def[amount]>]>:						
							- take <def[itemRaw]> quantity:<def[amount]>
							- give money quantity:<def[price].mul[<def[amount]>]>
							- narrate "<def[localMsg]><dark_green><def[amount]> items sold for <gold><&l><def[price].mul[<def[amount]>]>$<dark_green>."
							- determine cancelled
						- else:
							- if <def[amount].is[==].to[1]>:
								- narrate "<def[localMsg]><dark_red>У вас нет этого предмета.<reset>"
								- determine cancelled
							- else:
								- define amount:-:1
				- else:
					- define amount_small 64
					- repeat 64:
						- if <player.inventory.contains[<def[itemRaw]>].qty[<def[amount_small]>]>:						
							- take <def[itemRaw]> quantity:<def[amount_small]>
							- give money quantity:<def[price].mul[<def[amount_small]>]>
							- narrate "<def[localMsg]><dark_green><def[amount_small]> items sold for <gold><&l><def[price].mul[<def[amount_small]>]>$<dark_green>."
							- determine cancelled
						- else:
							- if <def[amount_small].is[==].to[1]>:
								- narrate "<def[localMsg]><dark_red>У вас нет этого предмета.<reset>"
								- determine cancelled
							- else:
								- define amount_small:-:1
									
									
									
            - if <player.flag[customer]>:
            # player gives money and gets items
              - if <player.inventory.is[==].to[context.clicked_inventory]>:
                      - determine cancelled
                      - stop
              - if <context.is_shift_click>:
                  - narrate "<dark_green>you bought stack of <context.item> for <gold>$<def[price].mul[64]><dark_green>."
                  - take money quantity:<def[price].mul[64]>
                  - give stone[material=<context.item.material>] quantity:64

              - else:
                  - narrate "<dark_green>you bought <context.item> for <gold>$<def[price].mul[1]><dark_green>."
                  - take money quantity:<def[price].mul[1]>
                  - give stone[material=<context.item.material>] quantity:1

          - determine cancelled

General_Set_Flag_Command:
  type: command
  name: setflag
  description: sets flag of npc nearby
  usage: /setflag <&lt>flag name<&gt> <&lt>value<&gt>

  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  allowed help:
    - determine <player.is_op||<context.server>>

  #  tab complete:
  #    - if !<player.is_op||<context.server>>:
  #        - stop
  #    - determine <list>

  script:
    - if !<player.is_op||<context.server>>:
        - narrate "<red>You do not have permission for that command."
        - stop
    - define mynpc <npc||true>
    - if <def[mynpc]>:
        - narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
        - stop
    - else:
        - flag npc "<context.args.get[1]>:<context.args.get[2]>"
        - narrate "<green><bold>[info:TraderBase]<reset> <aqua>flag <gray>'<context.args.get[1]>' <aqua>now is <gray>'<npc.flag[<context.args.get[1]>]>'"

General_Get_Flag_Command:
  type: command
  name: getflag
  description: gets flag of npc nearby
  usage: /givemeflag<&lt>flag name<&gt>

  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!

  script:
    - if !<player.is_op||<context.server>>:
        - narrate "<red>You do not have permission for that command."
        - stop
    - define mynpc <npc||true>
    - if <def[mynpc]>:
        - narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
        - stop
    - else:
        - narrate "<green><bold>[info:TraderBase]<reset> <aqua>flag <gray>'<context.args.get[1]>' <aqua>is <gray>'<npc.flag[<context.args.get[1]>]||<red>null<reset>>'"

Set_Size_Command:
  type: command
  name: setsize
  description: sets size of npc nearby
  usage: /setsize
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  allowed help:
    - determine <player.is_op||<context.server>>
  tab complete:
    - determine <list[9|18|27|36|45|54]>

  script:
    - if !<player.is_op||<context.server>>:
        - narrate "<red>You do not have permission for that command."
        - stop
    - define mynpc <npc||true>
    - if <def[mynpc]>:
        - narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <gray><underline>/npc select<reset><red> while near target npc"
        - stop
    - if <context.args.get[1].is_integer>:
      - flag npc "size:<context.args.get[1]||<npc.flag[size]>>"
      - narrate "<green><bold>[info:TraderBase]<reset> <aqua>set trader's inventory size to <gray>'<context.args.get[1]||null>'<reset><aqua>."
    - else:
      - narrate "<red><bold>[error:TraderBase]<reset> <red>argument <gray>'<context.args.get[1]||null>'<reset> <red>is invalid!"

Set_Price_Command:
  type: command
  name: setprice
  description: sets price for item of npc nearby
  usage: /setprice [slot] [price]
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  allowed help:
    - determine <player.is_op||<context.server>>

  script:
    - define mynpc <npc||true>
    - if !<player.is_op||<context.server>>:
        - narrate "<red>You do not have permission for that command."
        - stop
    - if <def[mynpc]>:
        - narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
        - stop
    - else:
        - if <context.args.get[1].is_integer>:
            - if <context.args.get[1].is[less].than[55]>:
                - if <context.args.get[2].is_integer>:
                  - flag npc "price_<context.args.get[1]>:<context.args.get[2]>"
				  - narrate "list is: <server.flag[<npc.flag[group]>]>"
				  - foreach <list[<server.flag[<npc.flag[group]>]>]>:
					- narrate "set flag price_<context.args.get[1]> of <[value]> to <context.args.get[2]>"
					- flag <[value]> "price_<context.args.get[1]>:<context.args.get[2]>"
                  - narrate "<green><bold>[info:TraderBase]<reset> <aqua>set price of slot <gray>'<context.args.get[1]>'<aqua> to <gray>'<context.args.get[2]>'<aqua>."
                - else:
                    - narrate "<red><bold>[error:TraderBase]<reset> <red>price <gray>'<context.args.get[2]||null>'<red> have to be an integer!"
            - else:
                - narrate "<red><bold>[error:TraderBase]<reset> <red>slot index <gray>'<context.args.get[1]||null>'<gray> <red>is out of range! (<italic>54 max<reset><red>)."
        - else:
            - narrate "<red><bold>[error:TraderBase]<reset> <red>slot index <gray>'<context.args.get[1]||null>'<gray> <red>is not an integer!"


loop:
  type: command
  name: loop
  description: sets lore for slot of trader's inventory
  usage: /setlore [slot|all] [<green>lore line1<reset> | <red>null<reset> | <dark_purple>same<reset>] (<green>lore line2<reset> | <red>null<reset> | <dark_purple>same<reset>)
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  allowed help:
    - determine <player.is_op||<context.server>>

  script:
	- narrate "list is: <server.flag[<npc.flag[group]>]>"
	- foreach <list[<server.flag[<npc.flag[group]>]>]>:
		- narrate "val <[value]>"
		- narrate "idx <[loop_index]>"

Set_Lore_Command:
  type: command
  name: setlore
  description: sets lore for slot of trader's inventory
  usage: /setlore [slot|all] [<green>lore line1<reset> | <red>null<reset> | <dark_purple>same<reset>] (<green>lore line2<reset> | <red>null<reset> | <dark_purple>same<reset>)
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  allowed help:
    - determine <player.is_op||<context.server>>

  script:

    - if !<player.is_op||<context.server>>:
        - narrate "<red>You do not have permission for that command."
        - stop

    - define mynpc <npc||true>
    - if <def[mynpc]>:
        - narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
        - stop
    - else:
        - define slot <context.args.get[1]||null>
        - define lore1 <context.args.get[2]||same>
        - define lore2 <context.args.get[3]||same>

        - if <def[slot].is[==].to[null]>:
            - narrate "usage: /setlore [line1|null|same] (line2|null|same)"
            - stop
        - if <def[slot].is_integer>:
            - if <def[slot].is[less].than[55]>:
                - if <def[lore1].is[==].to[same]>:
                    - narrate "<green><bold>[info:TraderBase]<reset> lore1_<context.args.get[1]> stays same<&co><reset> <gray>'<npc.flag[lore1_<context.args.get[1]>]>'"
                - else:
                    - flag npc "lore1_<context.args.get[1]>:<context.args.get[2]>"
					- narrate "<green><bold>[info:TraderBase]<reset> set lore1_<context.args.get[1]> to<&co> <gray>'<parse:<context.args.get[2]>>'"
					- foreach <list[<server.flag[<npc.flag[group]>]>]>:
						- narrate "set flag lore1_<context.args.get[1]> of <[value]> to <context.args.get[2]>"
						- flag <[value]> "lore1_<context.args.get[1]>:<context.args.get[2]>"
                   
                - if <def[lore2].is[==].to[same]>:
                    - narrate "<green><bold>[info:TraderBase]<reset> lore2_<context.args.get[1]> stays same<&co><reset> <gray>'<npc.flag[lore2_<context.args.get[1]>]>'"
                - else:
                    - flag npc "lore2_<context.args.get[1]>:<context.args.get[3]>"
                    - narrate "<green><bold>[info:TraderBase]<reset> set lore2_<context.args.get[1]> to<&co><&r> <gray>'<parse:<context.args.get[3]>>'"
					- foreach <list[<server.flag[<npc.flag[group]>]>]>:
						- narrate "set flag lore2_<context.args.get[1]> of <[value]> to <context.args.get[3]>"
						- flag <[value]> "lore2_<context.args.get[1]>:<context.args.get[3]>"
            - else:
                - narrate "<red><bold>[error:TraderBase]<reset> <red>slot index <gray>'<context.args.get[1]||null>'<gray> <red>is out of range! (<italic>54 max<reset><red>)."
        - else:
            - if <def[slot].is[==].to[all]>:
                - define slot 1
                - repeat <npc.flag[size]>:
                    - if <def[lore1].is[!=].to[same]>:
                        - flag npc "lore1_<def[slot]>:<def[lore1].replace[~].with[<def[slot]>]>"
						- foreach <list[<server.flag[<npc.flag[group]>]>]>:
							- flag <[value]> "lore1_<def[slot]>:<def[lore1].replace[~].with[<def[slot]>]>"
                    - if <def[lore2].is[!=].to[same]>:
                        - flag npc "lore2_<def[slot]>:<def[lore2].replace[~].with[<def[slot]>]>"
						- foreach <list[<server.flag[<npc.flag[group]>]>]>:
							- flag <[value]> "lore2_<def[slot]>:<def[lore2].replace[~].with[<def[slot]>]>"
                    - define slot:+:1
                - narrate "<green><bold>[info:TraderBase]<reset> <green>set lore to <gray>'<def[lore1]>'<reset> and <gray>'<def[lore2]>'<reset> for slots 1 to <npc.flag[size]>"
            - else:
              - narrate "<red><bold>[error:TraderBase]<reset><red> slot <gray>'<def[slot]>'<reset><red> is not an integer or <gray>'all'<reset><red>!"



Set_Material_Command:
  type: command
  name: setmat
  description: sets item for slot of trader's inventory
  usage: /setmat [slot] [material]
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  allowed help:
    - determine <player.is_op||<context.server>>
#  tab complete:
#      - if <context.args.size.is[==].to[0]>:
#          - determine <list[slot]>
#      - else:
#        - determine  <list[diamond|stick|redstone]>
  script:
    - if !<player.is_op||<context.server>>:
        - narrate "<red>You do not have permission for that command."
        - stop
    - define mynpc <npc||true>
    - if <def[mynpc]>:
        - narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
        - stop
    - else:
      - narrate "<green><bold>[info:TraderBase]<reset> set material of slot <context.args.get[1]> to <context.args.get[2]>"
      - flag npc "material_<context.args.get[1]>:<context.args.get[2]>"



Set_Title_Command:
  type: command
  name: settitle
  description: sets title visible in trader's inventory
  usage: /settitle [GUI title]
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  allowed help:
    - determine <player.is_op||<context.server>>

  script:
    - if !<player.is_op||<context.server>>:
        - narrate "<red>You do not have permission for that command."
        - stop
    - define mynpc <npc||true>
    - if <def[mynpc]>:
        - narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
        - stop
    - else:
      - flag npc "inv_title:<context.args.get[1]>"
      - narrate "<green><bold>[info:TraderBase]<reset> set inventory title to <parse:<context.args.get[1]>>"

check_encoding:
  type: command
  name: checkencoding
  description: ...
  usage: /checkencoding
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  allowed help:
    - determine <player.is_op||<context.server>>

  script:
    - if !<player.is_op||<context.server>>:
        - narrate "<red>You do not have permission for that command."
        - stop
    - narrate "привет, мир!1"


Set_Trader_Mode_Command:
  type: command
  name: setmode
  description: Устанавливает режим торговца на скупку или продажу
  usage: /setmode [sell | buy]
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  allowed help:
    - determine <player.is_op||<context.server>>
  tab complete:
    - determine <list[buy|sell]>
  script:
    - if !<player.is_op||<context.server>>:
        - narrate "<red>You do not have permission for that command."
        - stop
    - define mynpc <npc||true>
    - if <def[mynpc]>:
        - narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
        - stop
    - else:
      - if <context.args.get[1].is[==].to[sell]>:
          - flag npc "trader_mode:<context.args.get[1]>"
          - narrate "<green><bold>[info:TraderBase]<reset> <green><bold>Теперь торговец будет продавать предметы"
          - stop
      - if <context.args.get[1].is[==].to[buy]>:
          - flag npc "trader_mode:<context.args.get[1]>"
          - narrate "<green><bold>[info:TraderBase]<reset> <dark_purple><bold>Теперь торговец будет скупать предметы"
          - stop
      - narrate "<red><bold>[error:TraderBase]<reset> <red><bold>Допустимые аргументы<&co>buy|sell"

Set_Trader_Name_Command:
  type: command
  name: setname
  description: Sets trader name visible in chat
  usage: /setname [ trader name ]
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  script:
    - define mynpc <npc||true>
    - if <def[mynpc]>:
      - narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
      - stop
    - else:
      - narrate "<green><bold>[info:TraderBase]<reset> <aqua>set trader name to: <reset><parse:<context.args.get[1]>>"
      - flag npc "trader_name:<context.args.get[1]>"

#Set_Item_Display_Name_Command:
#  type: command
#  name: setdispname
#  description: Sets display name of item
#  usage: /setdispname [ trader name ]
#  permission: my.permission.node
#  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
#  script:
#    - narrate "set trader name to <context.args.get[1]>"
#    - npc flag "trader_name:<context.args.get[1]>"

Edit_Trades_Command:
  type: command
  name: edittrades
  description: turns on editor mode for trader item layout
  usage: /edittrades
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  script:
    - define mynpc <npc||true>
    - if <def[mynpc]>:
        - narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
        - stop
    - else:
      - narrate "<green><bold>[info:TraderBase]<reset> <green>now you can edit trades layout"
      - flag npc "edit_mode:true"
      - flag player "edits_npc:<npc>"

Get_Layout_Command:
  type: command
  name: getlayout
  description: returns material layout. /getlayout all to get material=air as well.
  usage: /getlayout (all)
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  script:
    - define mynpc <npc||true>
    - if <def[mynpc]>:
        - narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
        - stop
    - else:
      - define slot 1
      - narrate "<white><underline>slot   material           price          <reset>
	
	  - define fifteen 15
	  - define ten 10
	  - define five 5
	  
      - repeat <npc.flag[size]>:
          - if <npc.flag[material_<def[slot]>].is[!=].to[air]> || <context.args.get[1].is[==].to[all]||false>:
            #- narrate "<red><def[slot]><reset><&co> <yellow><npc.flag[material_<def[slot]>]><reset> <&co> <green><npc.flag[price_<def[slot]>]><reset>  <&co> <blue><npc.flag[lore1_<def[slot]>]> <&co><dark_purple> <npc.flag[lore2_<def[slot]>]><reset>"
			- execute as_op 'tellraw <player.name> ["",{"text":"<def[slot]>. <def[ten].power[<tern[<def[slot].is[less].than[10]>].pass[2].fail[1]>].replace[0].with[ ].replace[1].with[ ]><&sp>", "color":"blue"}, 
													   {"text":"| ", "color":"white"},
													   {"text":"<npc.flag[material_<def[slot]>]> <def[ten].power[<def[fifteen].sub[<npc.flag[material_<def[slot]>].difference[ ]>]>].format_number[0].replace[0].with[ ].replace[1].with[ ]>", "color":"aqua", "clickEvent":{"action":"suggest_command","value":"/setmat <def[slot]> "}, "hoverEvent":{"action":"show_text", "value":{"text":"click to set material of this item", "color":"gold"}}}, 
													   {"text":"| ", "color":"white"},
													   {"text":"$<npc.flag[price_<def[slot]>]> <def[ten].power[<def[ten].sub[<npc.flag[price_<def[slot]>].difference[ ]>]>].format_number[0].replace[0].with[ ].replace[1].with[ ]>", "color":"gold", "clickEvent":{"action":"suggest_command","value":"/setprice <def[slot]> "}, "hoverEvent":{"action":"show_text", "value":{"text":"click to set price of this item", "color":"gold"}}},
													   {"text":"| ", "color":"white"}
													   ]'
          #{"text":"<npc.flag[lore1_<def[slot]>]> ", "color":"blue", "clickEvent":{"action":"suggest_command","value":"/setlore <def[slot]> "}, "hoverEvent":{"action":"show_text", "value":{"text":"set lore 1", "color":"red"}}}
		  #{"text":"lore2 <npc.flag[lore2_<def[slot]>]> ", "color":"light_purple", "clickEvent":{"action":"suggest_command","value":"/setlore <def[slot]> same "}, "hoverEvent":{"action":"show_text", "value":{"text":"set lore 2", "color":"red"}}}										   
		  #
		  #{"text":"PRICETAG", "color":"blue", "clickEvent":{"action":"suggest_command","value":"/setprice SLOT VALUE"}, "hoverEvent":{"action":"show_text", "value":{"text":"SET PRICE FOR MATERIAL", "color":"red"}}}
		  
	
          - define slot:+:1

Add_Trader_To_Group_Command:
    type: command
    name: addtogroup
	description: ...
	usage: /...
	permission: my.permission.node
	permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
	script:
		
		# npc defined in context
		- if <npc||true>:
			- narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
			- stop
		- else:
			# group name specified
			- if !<context.args.get[1]||true>:
			
				# npc already in some group
				- if <npc.has_flag[group]>:
					
					
					# this group exists on server
					- if <server.has_flag[<npc.flag[group]>]>:
						- narrate "group registered on server"
						# remove npc from previous group
						- if <npc.flag[group].is[!=].to[<context.args.get[1]>]>:
							- narrate "remove npc(<npc>) from prev group(<npc.flag[group]>) <server.flag[<npc.flag[group]>]>"
							# - narrate "excluded from <server.flag[<npc.flag[group]>]> : <list[<server.flag[<npc.flag[group]>]>].exclude[<npc>]>"
							- flag server <npc.flag[group]>:<list[<server.flag[<npc.flag[group]>]>].exclude[<npc>]>
							# - narrate "removed. <server.flag[<npc.flag[group]>]>"
							# - narrate "is group <server.flag[<npc.flag[group]>]> empty <server.flag[<npc.flag[group]>].is[==].to[li@]>"
							- if <server.flag[<npc.flag[group]>].is[==].to[li@]>:
								- narrate "<npc.flag[group]> is empty: <server.flag[<npc.flag[group]>]>"
								- flag server "<npc.flag[group]>:!"
								- narrate "<dark_green>group <npc.flag[group]> now is empty. remove it from server group list."
								- flag server "groups:<list[<server.flag[groups]>].exclude[<npc.flag[group]>]>"
								
								
				- if <server.has_flag[<context.args.get[1]>]>:
					
					
					- if !<list[<server.flag[<context.args.get[1]>]>].contains[<npc>]>:
						- narrate "<gray>'<npc>' <aqua>added to group <gray>'<context.args.get[1]>'"
						#- narrate "raw member list <server.flag[<context.args.get[1]>]>. list including new member <server.flag[<context.args.get[1]>]>|<npc>"
						- flag server "<context.args.get[1]>:<server.flag[<context.args.get[1]>]>|<npc>"
						
						
							
						- flag npc "group:<context.args.get[1]>"
						
		
						# look for price defaults
						- foreach <list[<server.flag[<context.args.get[1]>]>]>:
							- define member <[value]>
							- define slot 1
							- repeat <npc.flag[size]>:
								- if <def[member].as_npc.flag[price_<def[slot]>]||true>:
									# npc price is null
									- define crunch 1
								- else:
									#- narrate "item <def[slot]> has price <def[member].as_npc.flag[price_<def[slot]>]>"
									#- narrate <def[member].as_npc.flag[price_<def[slot]>]>
									- flag npc "price_<def[slot]>:<def[member].as_npc.flag[price_<def[slot]>]>"
								- define slot:+:1
						
						# look for lore defaults
						- foreach <list[<server.flag[<context.args.get[1]>]>]>:
							- define member <[value]>
							- define slot 1
							- repeat <npc.flag[size]>:
								#- narrate "lore <def[member]> <dark_red><def[slot]>"
								- if <def[member].as_npc.flag[lore1_<def[slot]>]||true>:
									# npc lore is null
									- define crunch 1
								- else:
									#- narrate "item <def[slot]> has lore <def[member].as_npc.flag[lore1_<def[slot]>]>"
									#- narrate <def[member].as_npc.flag[lore1_<def[slot]>]>
									- flag npc "lore1_<def[slot]>:<def[member].as_npc.flag[lore1_<def[slot]>]>"
								
								- if <def[member].as_npc.flag[lore1_<def[slot]>]||true>:
									# npc lore is null
									- define crunch 1
								- else:
									#- narrate "item <def[slot]> has lore <def[member].as_npc.flag[lore2_<def[slot]>]>"
									#- narrate <def[member].as_npc.flag[lore2_<def[slot]>]>
									- flag npc "lore2_<def[slot]>:<def[member].as_npc.flag[lore2_<def[slot]>]>"
								
								- define slot:+:1
							
						# look for material defaults
						- foreach <list[<server.flag[<context.args.get[1]>]>]>:
							
							- define member <[value]>
							- define slot 1
							- repeat <npc.flag[size]>:
								- if <def[member].is[==].to[<npc>]>:
									# skip this repeat loop
									- stop
								
								#- narrate "mytest <def[member]> <dark_red><def[slot]>"
								- if  <def[member].as_npc.flag[material_<def[slot]>]||true>:
									#- narrate "something went wrong npc <npc> member <def[member]> '42352'"
									- define crunch 1
								- else:
									
									- if <def[member].flag[material_<def[slot]>].is[!=].to[air]>:
								
										#- narrate "member defined? <def[member]>"
										- flag npc "material_<def[slot]>:<def[member].flag[material_<def[slot]>]||gold_ingot>"
										- narrate "item <def[slot]> has material___ <def[member].flag[material_<def[slot]>]>"
										#- narrate <def[member].as_npc.flag[lore1_<def[slot]>]>
										
								- define slot:+:1

					- else:
						- narrate "<red>group <gray>'<context.args.get[1]>' <red>already has member <gray>'<npc>'"
					
				# create new group	
				- else:
					- narrate "registered new group <context.args.get[1]>"
					- narrate "list was <server.flag[groups]||<list[]>>"
					- flag server "groups:<server.flag[groups]||<list[]>>|<context.args.get[1]>"
					- narrate "now it is <server.flag[groups]>"
					- flag server "<context.args.get[1]>:<list[<npc>]>"
					- flag npc "group:<context.args.get[1]>"
					- narrate "<aqua>created group <gray>'<context.args.get[1]>' <aqua>with <gray>'<npc>' <aqua>added."
			- else:
				- narrate "angry message"
				
				
				
Edit_World_Flag_Command:
    type: command
    name: wflag
	description: ...
	usage: /...
	permission: my.permission.node
	permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
	script:
		- if <context.args.get[1].is[==].to[set]>:
			- flag server "<context.args.get[2]>:<context.args.get[3]>"
			- narrate <server.flag[<context.args.get[2]>]>
		- if <context.args.get[1].is[==].to[del]>:
			- flag server "<context.args.get[2]>:!"
			- narrate "deleted"
		- if <context.args.get[1].is[==].to[get]>:
			- narrate <server.flag[<context.args.get[2]>]>
Help_Me_Command:
  type: command
  name: traderhelp
  description: prints out some commands
  usage: /traderhelp<gray> somewhere in future (command)...
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  script:
    - narrate "<white><bold>/getflag <&lt><green>flag name<reset><&gt>"
    - narrate "<white><bold>/getlayout <&lt><green>all(optional)<reset><&gt>"
    - narrate "<white><bold>/setflag <&lt><green>flag name<reset><&gt> <&lt><green>flag value<reset><&gt>"
    - narrate "<white><bold>/setsize <&lt><green>inventory size<reset><&gt>"
    - narrate "<white><bold>/setprice <&lt><green>slot<reset><&gt> <&lt><green>price<reset><&gt>"
    - narrate "<white><bold>/setlore <&lt><green>slot|all<reset><&gt> <&lt><green>lore1|null|same<reset><&gt> <&lt><green>lore2|null|same<reset><&gt>"
    - narrate "<white><bold>/setname <&lt><green>name<reset><&gt>"
    - narrate "<white><bold>/settitle <&lt><green>title<reset><&gt>"
    - narrate "<white><bold>/edittrades"
    - narrate "<white><bold>/setmode <&lt><green>sell|buy<reset><&gt>"
    - narrate "<white><bold>/setmat <&lt><green>slot<reset><&gt> <&lt><green>material<reset><&gt>"
	
Edit_Server_Groups_Command:
  type: command
  name: groups
  description: prints out some commands
  usage: /groups
  permission: my.permission.node
  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
  script:
	- if <context.args.get[1].is[==].to[get]>:
		- if <context.args.get[2].is[==].to[members]>:
			- foreach <list[<server.flag[groups]>]>:
				- define group <[value]>
				- narrate "<dark_gray>group <dark_red><def[group]>"
				- foreach <list[<server.flag[<[value]>]>]>:
					- narrate "<blue><[loop_index]>. <aqua>member of <gray><def[group]><aqua>: <gray><[value]>"
		- else:
			- if <context.args.get[2].is[==].to[names]>:
				- foreach <list[<server.flag[groups]>]>:
					- narrate "<blue><[loop_index]>. <aqua>group: <gray><[value]>"

NPC_Clear_Command:
	type: command
    name: clearslots
    description: ...
    usage: /clearslots (start) (end)<n>/clearslots [start] [end] "sync"
    permission: my.permission.node
    permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
    script:
		- if <npc||true>:
			- narrate "<red><bold>[error:TraderBase]<reset><red> You need to select an NPC first with <underline><green>/npc select<reset><red> while near target npc"
			- stop
		
		- else:
			- if !<context.args.get[1]||true>:
				- if <context.args.get[1].is_integer>:
					- define start_idx <context.args.get[1]>
				- else:
					- narrate "<red> start slot<gray> '<context.args.get[1]>'<red> must be integer"
					- stop
			- else:
				- define start_idx 1
				
				
			- if !<context.args.get[1]||true>:
				- if <context.args.get[2].is_integer>:
					- define end_idx <context.args.get[2]>
				- else:
					- narrate "<red> end slot<gray> '<context.args.get[2]>'<red> must be integer"
					- stop
			- else:
				- define end_idx <npc.flag[size]>
			
			- define slot <def[start_idx]>
			- repeat <def[end_idx].sub[<def[slot]>]>:
				
				- if <context.args.get[3].is[==].to[sync]>:
					- if <npc.has_flag[group]> && <server.has_flag[<npc.flag[group]>]>:
						- if <[value].is[==].to[1]>:
							- narrate "<aqua>updating group..."
						- foreach <list[<server.flag[<npc.flag[group]>]>]>:
							- flag <[value]> "material_<def[slot]>:air" 
				- else:
					- flag npc "material_<def[slot]>:air"
				- define slot:+:1
			- narrate "<aqua>Cleared <def[end_idx].sub[<def[start_idx]>]> slots of <gray>'<npc>'s'<aqua> inventory."
			
			
			- if <npc.has_flag[group]> && <server.has_flag[<npc.flag[group]>]>:
				
				- if <context.args.size.is[more].than[2]> && <context.args.get[3].is[==].to[sync]>:
					- narrate "<aqua>group <gray>'<npc.flag[group]>'<aqua> was updated."
				- else:
					- narrate "<aqua>group <gray>'<npc.flag[group]>'<aqua> was not edited."
		
					
Test_Command:
#/tellraw @p ["",{"text":"Yes","color":"green","bold":"true","clickEvent":{"action":"run_command","value":"/tellraw @p {\"text\":\"Confirmed!\",\"color\":\"green\"}"},"hoverEvent":{"action":"show_text","value":{"text":"","extra":[{"text":"Confirm","color":"green"}]}}},{"text":"/","color":"dark_gray","bold":"false"},{"text":"No","color":"red","bold":"true","clickEvent":{"action":"run_command","value":"/tellraw @p {\"text\":\"Cancelled\",\"color\":\"red\"}"},"hoverEvent":{"action":"show_text","value":{"text":"","extra":[{"text":"Cancel","color":"red"}]}}}]				
	  type: command
	  name: test
	  description: prints out some commands
	  usage: /groups
	  permission: my.permission.node
	  permission message: Sorry, <player.name>, you can't use my command because you don't have the permission '<permission>'!
	  script:
		- execute as_op 'tellraw <player.name> ["", {"text":"PRICETAG", "color":"blue", "clickEvent":{"action":"suggest_command","value":"/setprice SLOT VALUE"}, "hoverEvent":{"action":"show_text", "value":{"text":"SET PRICE FOR MATERIAL", "color":"red"}}}, {"text":"PRICETAG", "color":"blue", "clickEvent":{"action":"suggest_command","value":"/setprice SLOT VALUE"}, "hoverEvent":{"action":"show_text", "value":{"text":"SET PRICE FOR MATERIAL", "color":"red"}}}]'
		#["",{"text":"price:","color":"blue","bold":"true","clickEvent":{"action":"suggest_command","value":"/setprice SLOT VALUE"},}]"


